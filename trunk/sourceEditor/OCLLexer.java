/* The following code was generated by JFlex 1.4.3 on 3/8/10 1:01 PM */

package sourceEditor;

import java.io.*;

import com.Ostermiller.Syntax.Lexer.Lexer;
import com.Ostermiller.Syntax.Lexer.Token;

/* OCLLexer.java is a generated file.  You probably want to
 * edit SQLLexer.lex to make changes.  Use JFlex to generate it.
 * To generate SQLLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main SQLLexer.lex</code><br>
 * You will then have a file called SQLLexer.java
 */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/8/10 1:01 PM from the specification file
 * <tt>C:/Users/Tiago/Desktop/jflex-1.4.3/lib/OCLLexer.lex</tt>
 */
public class OCLLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 33,  0, 22, 33,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    22, 24, 24, 24, 26, 24, 24, 32, 27, 27, 27, 37, 27, 28, 30, 31, 
    36, 36, 25, 25, 25, 25, 25, 25, 25, 25, 19, 27, 31, 31, 29, 24, 
    24,  6, 35,  9, 13,  4,  5, 16, 20, 17,  0, 15,  7, 21, 11, 10, 
    14,  0,  2,  8,  1,  3, 18,  0, 12,  0,  0, 27, 34, 27, 24, 23, 
    24,  6, 35,  9, 13,  4,  5, 16, 20, 17,  0, 15,  7, 21, 11, 10, 
    14,  0,  2,  8,  1,  3, 18,  0, 12,  0,  0,  0, 24,  0, 24,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\15\2\1\3\1\1\1\4\1\5\1\4"+
    "\2\6\1\7\1\4\12\2\1\10\7\2\1\10\1\2"+
    "\1\0\1\11\1\3\1\12\1\7\1\0\1\13\1\14"+
    "\2\0\7\2\1\10\3\2\1\0\1\13\1\0\1\15"+
    "\1\16\2\0\1\17\2\2\1\20\1\10\2\2\1\11"+
    "\2\0\1\15\1\21\1\0\4\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u023a\0\u0286\0\u02ac\0\u02d2\0\u023a\0\u02f8\0\u031e"+
    "\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e"+
    "\0\u0474\0\u049a\0\114\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558"+
    "\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u02ac\0\u0662"+
    "\0\u023a\0\u031e\0\u023a\0\u023a\0\u0688\0\u06ae\0\u06d4\0\u06fa"+
    "\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a"+
    "\0\u0850\0\u0876\0\u031e\0\u089c\0\u08c2\0\u023a\0\u08e8\0\u090e"+
    "\0\114\0\u0934\0\u095a\0\114\0\u023a\0\u0980\0\u09a6\0\u0876"+
    "\0\u09cc\0\u08c2\0\u089c\0\u023a\0\u09f2\0\u0a18\0\u0a3e\0\u0a64"+
    "\0\u0a8a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\3\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\2\3\1\17"+
    "\1\3\1\20\2\3\1\21\2\22\1\23\1\24\1\20"+
    "\1\25\1\26\1\27\1\26\1\30\1\21\1\3\1\31"+
    "\1\23\1\26\46\22\23\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\2\3\1\32\20\3"+
    "\1\0\1\33\1\3\1\0\1\3\1\0\1\3\10\0"+
    "\3\3\1\0\7\3\1\34\3\3\1\35\7\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\10\0\3\3\1\0"+
    "\6\3\1\36\14\3\1\0\2\3\1\0\1\3\1\0"+
    "\1\3\10\0\3\3\1\0\1\3\1\37\11\3\1\40"+
    "\7\3\1\0\2\3\1\0\1\3\1\0\1\3\10\0"+
    "\3\3\1\0\4\3\1\41\16\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\10\0\3\3\1\0\12\3\1\42"+
    "\10\3\1\0\2\3\1\0\1\3\1\0\1\3\10\0"+
    "\3\3\1\0\2\3\1\43\13\3\1\44\4\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\10\0\3\3\1\0"+
    "\3\3\1\45\6\3\1\41\10\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\10\0\3\3\1\0\12\3\1\46"+
    "\10\3\1\0\2\3\1\0\1\3\1\0\1\3\10\0"+
    "\3\3\1\0\4\3\1\47\16\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\10\0\3\3\1\0\2\3\1\50"+
    "\3\3\1\51\3\3\1\52\10\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\10\0\3\3\1\0\5\3\1\43"+
    "\5\3\1\53\7\3\1\0\1\3\1\54\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\75\0\1\21\12\0\1\21"+
    "\10\0\1\55\24\0\1\23\4\0\1\56\5\0\1\23"+
    "\32\0\1\57\12\0\1\57\35\0\1\60\1\61\41\0"+
    "\1\56\12\0\1\56\1\0\40\62\1\63\1\64\1\65"+
    "\3\62\23\3\1\0\2\3\1\0\1\3\1\0\1\3"+
    "\6\0\1\66\1\0\3\3\1\0\3\3\1\67\17\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\1\0\4\3\1\70\16\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\10\3\1\71\12\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\1\0\15\3\1\72\5\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\7\3\1\73\13\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\1\0\1\3\1\46\21\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\15\3\1\43\5\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\1\0\1\3\1\43\21\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\13\3\1\74\7\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\1\0\4\3\1\46\16\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\7\3\1\75\13\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\1\0\2\3\1\43\20\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\5\3\1\43\15\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\1\0\4\3\1\76\16\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\11\3\1\77\11\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\1\0\10\3\1\100\12\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\22\3\1\76\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\10\0\3\3\1\0"+
    "\16\3\1\101\4\3\1\0\2\3\1\0\1\3\1\0"+
    "\1\3\10\0\3\3\35\0\1\102\10\0\1\102\4\0"+
    "\1\55\24\0\1\56\12\0\1\56\1\0\41\60\1\0"+
    "\4\60\40\62\1\103\1\64\1\65\3\62\40\104\1\105"+
    "\1\106\1\107\1\104\1\110\1\104\4\3\1\111\16\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\1\0\13\3\1\43\7\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\4\3\1\43\16\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\1\0\16\3\1\112\2\3\1\47\1\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\10\0\3\3\1\0\10\3"+
    "\1\67\12\3\1\0\2\3\1\0\1\3\1\0\1\3"+
    "\10\0\3\3\1\0\1\3\1\113\21\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\10\0\3\3\1\0\7\3"+
    "\1\114\13\3\1\0\2\3\1\0\1\3\1\0\1\3"+
    "\10\0\3\3\1\0\23\3\1\115\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\17\3\1\116\3\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\1\0\1\3\1\76\21\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\3\3\1\0\7\3\1\117\13\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\10\0\3\3"+
    "\32\0\1\120\12\0\1\120\1\0\40\104\1\105\1\106"+
    "\1\107\1\104\1\121\1\104\40\122\1\105\1\0\2\122"+
    "\1\0\1\122\40\104\1\123\1\106\1\107\1\104\1\121"+
    "\1\104\40\121\1\124\1\106\1\125\1\121\1\110\1\121"+
    "\6\3\1\51\14\3\1\0\2\3\1\0\1\3\1\0"+
    "\1\3\10\0\3\3\1\0\4\3\1\126\16\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\10\0\3\3\1\0"+
    "\6\3\1\127\14\3\1\0\2\3\1\0\1\3\1\0"+
    "\1\3\10\0\3\3\1\0\21\3\1\130\1\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\10\0\3\3\1\0"+
    "\40\121\1\0\1\106\1\125\44\121\1\106\1\125\3\121"+
    "\14\3\1\41\6\3\1\0\2\3\1\0\1\3\1\0"+
    "\1\3\10\0\3\3\1\0\20\3\1\71\2\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\10\0\3\3\1\0"+
    "\4\3\1\131\16\3\1\0\2\3\1\0\1\3\1\0"+
    "\1\3\10\0\3\3\1\0\10\3\1\43\12\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\10\0\3\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2736];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\15\1\1\11\1\1\1\11\3\1\1\11"+
    "\26\1\1\0\3\1\1\11\1\0\2\11\2\0\13\1"+
    "\1\0\1\1\1\0\1\1\1\11\2\0\4\1\1\11"+
    "\3\1\2\0\1\1\1\11\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
	private StringBuffer commentBuffer = new StringBuffer();
	private int commentNestCount = 0;
	private int commentStartLine = 0;
	private int commentStartChar = 0;
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }

    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }                   
            } else {
                in = System.in;
            }       
            OCLLexer shredder = new OCLLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != OCLToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    } 

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OCLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OCLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.LITERAL_STRING;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 18: break;
        case 8: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.RESERVED_WORD;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 19: break;
        case 10: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.COMMENT_END_OF_LINE;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 20: break;
        case 9: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.LITERAL_FLOAT;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 21: break;
        case 4: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.ERROR;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 22: break;
        case 14: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.ERROR_BAD_BIT_STRING;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 23: break;
        case 13: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.ERROR_UNCLOSED_BIT_STRING;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 24: break;
        case 12: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.ERROR_UNCLOSED_STRING;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 25: break;
        case 1: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.WHITE_SPACE;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 26: break;
        case 16: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.LITERAL_BOOLEAN;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 27: break;
        case 15: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.LITERAL_NULL;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 28: break;
        case 2: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.IDENTIFIER;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 29: break;
        case 6: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.OPERATOR;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 30: break;
        case 5: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.LITERAL_INTEGER;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 31: break;
        case 3: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.SEPARATOR;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 32: break;
        case 7: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.SPECIAL_CHARACTER;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 33: break;
        case 17: 
          { nextState = YYINITIAL;
	lastToken = OCLToken.LITERAL_BIT_STRING;
    String text = yytext();
	OCLToken t = (new OCLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
