/* The following code was generated by JFlex 1.4.1 on 7/6/07 8:47 AM */

package sourceEditor;

import java.io.*;

import com.Ostermiller.Syntax.Lexer.Lexer;
import com.Ostermiller.Syntax.Lexer.Token;

/* PDDLLexer.java is a generated file.  You probably want to
 * edit SQLLexer.lex to make changes.  Use JFlex to generate it.
 * To generate SQLLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main PDDLLexer.lex</code><br>
 * You will then have a file called PDDLLexer.java
 */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7/6/07 8:47 AM from the specification file
 * <tt>sourceEditor/PDDLLexer.lex</tt>
 */
public class PDDLLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 49, 56,  0, 28, 55,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    52, 30, 30, 30, 32, 30, 30, 54, 53, 53, 33, 60, 33, 20, 59, 50, 
    58, 58, 31, 31, 31, 31, 31, 31, 31, 31,  9, 61, 50, 50, 50, 51, 
    30,  8, 24, 21,  1,  2,  3, 17, 25,  4, 22,  0, 18,  7,  5,  6, 
    15, 11, 10, 14, 13, 12, 19, 26, 23, 16, 27, 33, 57, 33, 30, 29, 
    30, 41, 24, 21, 34, 35, 36, 17, 48, 37, 22,  0, 46, 40, 38, 39, 
    45, 11, 42, 44, 43, 12, 19, 26, 47, 16, 27,  0, 30,  0, 30,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\15\2\1\3\2\2\1\1\1\4\1\5"+
    "\1\4\1\6\15\3\1\7\2\4\1\6\10\2\1\10"+
    "\32\2\1\0\1\2\1\0\1\11\1\6\1\0\1\12"+
    "\1\13\1\0\1\14\12\2\1\0\40\2\1\0\1\15"+
    "\1\16\2\0\1\2\1\0\1\12\11\2\1\0\35\2"+
    "\2\0\1\15\1\17\1\0\1\11\4\2\1\0\37\2"+
    "\1\0\1\10\20\2\1\0\2\2\1\0\3\2\2\0"+
    "\12\2\1\0\3\2\1\0\2\2\1\0\2\2\2\0"+
    "\1\10\7\2\1\0\3\2\1\0\2\2\1\0\1\10"+
    "\1\2\3\0\5\2\1\0\1\2\1\0\1\2\7\0"+
    "\1\2\2\0\2\10\10\0\1\2\7\0\1\2\24\0"+
    "\1\10\21\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u03a2\0\u049a\0\u04d8\0\u03a2\0\272"+
    "\0\370\0\u0136\0\u0174\0\u01b2\0\u01f0\0\u022e\0\u026c\0\174"+
    "\0\u02e8\0\u0326\0\u0364\0\u045c\0\u0516\0\u0554\0\u0592\0\u05d0"+
    "\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0"+
    "\0\174\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u04d8"+
    "\0\u0554\0\u03a2\0\u03a2\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a"+
    "\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a"+
    "\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea"+
    "\0\u1a28\0\u1a66\0\u03a2\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u0554"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e"+
    "\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e"+
    "\0\u1a66\0\u1a28\0\u03a2\0\u254c\0\u1b5e\0\u258a\0\u25c8\0\u2606"+
    "\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6"+
    "\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6"+
    "\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6"+
    "\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6"+
    "\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6"+
    "\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396"+
    "\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586"+
    "\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776"+
    "\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966"+
    "\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56"+
    "\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46"+
    "\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36"+
    "\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126"+
    "\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u429a\0\u42d8\0\u4316"+
    "\0\u4354\0\u4392\0\u43d0\0\u03a2\0\u440e\0\u444c\0\u448a\0\u44c8"+
    "\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u467a\0\u46b8"+
    "\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a\0\u48a8"+
    "\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u4a5a\0\u4a98"+
    "\0\u4ad6\0\u4b14\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88"+
    "\0\u4cc6\0\u4d04\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78"+
    "\0\u4eb6\0\u4d04\0\u4ef4\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u502a"+
    "\0\u5068\0\u50a6\0\u50e4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\3\3\1\15\1\16\1\17\4\3\1\20"+
    "\3\3\1\21\1\3\1\22\1\3\1\23\2\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\3\40\1\44"+
    "\1\20\1\45\1\23\1\27\1\46\1\23\1\44\1\3"+
    "\1\25\1\47\1\20\1\50\76\24\11\3\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\17\3"+
    "\10\0\2\3\3\0\2\3\1\51\3\3\1\52\2\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\1\3\1\51\3\3\1\52\11\3\10\0\2\3"+
    "\3\0\4\3\1\53\4\3\1\0\12\3\1\0\2\3"+
    "\1\54\4\3\1\0\1\3\1\0\1\3\2\0\3\3"+
    "\1\53\11\3\1\54\1\3\10\0\2\3\3\0\6\3"+
    "\1\55\2\3\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\5\3\1\55\11\3\10\0\2\3"+
    "\3\0\5\3\1\56\1\3\1\57\1\3\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\4\3"+
    "\1\56\1\3\1\57\10\3\10\0\2\3\3\0\6\3"+
    "\1\60\2\3\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\5\3\1\60\11\3\10\0\2\3"+
    "\3\0\11\3\1\0\1\61\11\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\10\3\1\61\6\3\10\0"+
    "\2\3\3\0\4\3\1\62\3\3\1\63\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\3\3"+
    "\1\62\3\3\1\63\7\3\10\0\2\3\3\0\5\3"+
    "\1\64\3\3\1\0\3\3\1\65\1\66\3\3\1\67"+
    "\1\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\4\3\1\64\4\3\1\65\1\66\1\3\1\67\2\3"+
    "\10\0\2\3\3\0\1\3\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\0\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\3\1\106\1\3\1\107\1\0"+
    "\1\110\6\3\1\0\1\3\1\0\1\3\2\0\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\103\1\104\1\105\3\3\10\0\2\3\3\0\6\3"+
    "\1\111\2\3\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\5\3\1\111\11\3\10\0\2\3"+
    "\3\0\6\3\1\112\2\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\5\3\1\112\11\3"+
    "\10\0\2\3\3\0\11\3\1\0\1\113\11\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\10\3\1\113"+
    "\6\3\10\0\2\3\101\0\11\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\17\3\5\0"+
    "\1\114\2\0\2\3\3\0\11\3\1\0\12\3\1\0"+
    "\4\3\1\115\2\3\1\0\1\3\1\0\1\3\2\0"+
    "\16\3\1\115\10\0\2\3\37\0\1\23\24\0\1\23"+
    "\2\0\1\23\2\0\2\23\7\0\1\116\34\0\1\25"+
    "\3\0\1\116\26\0\1\25\1\117\41\0\1\120\32\0"+
    "\1\120\3\0\24\45\1\0\37\45\2\0\10\45\66\121"+
    "\1\122\2\123\1\124\4\121\37\0\1\117\32\0\1\117"+
    "\100\0\1\125\3\3\1\126\5\3\1\0\12\3\1\0"+
    "\1\127\6\3\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\1\126\14\3\10\0\2\3\3\0\7\3\1\130\1\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\6\3\1\130\10\3\10\0\2\3\3\0\11\3"+
    "\1\0\3\3\1\131\6\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\11\3\1\131\5\3\10\0\2\3"+
    "\3\0\4\3\1\132\4\3\1\0\12\3\1\0\1\133"+
    "\6\3\1\0\1\3\1\0\1\3\2\0\3\3\1\132"+
    "\13\3\10\0\2\3\3\0\11\3\1\0\1\134\11\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\10\3"+
    "\1\134\6\3\10\0\2\3\3\0\11\3\1\0\12\3"+
    "\1\0\1\135\6\3\1\0\1\3\1\0\1\3\2\0"+
    "\17\3\10\0\2\3\3\0\11\3\1\0\5\3\1\136"+
    "\4\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\13\3\1\136\3\3\10\0\2\3\3\0\11\3\1\0"+
    "\3\3\1\61\6\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\11\3\1\61\5\3\10\0\2\3\3\0"+
    "\5\3\1\137\3\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\4\3\1\137\12\3\10\0"+
    "\2\3\3\0\11\3\1\0\12\3\1\0\2\3\1\137"+
    "\4\3\1\0\1\3\1\0\1\3\2\0\15\3\1\137"+
    "\1\3\10\0\2\3\3\0\1\3\1\61\7\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\1\61\16\3\10\0\2\3\3\0\11\3\1\0\12\3"+
    "\1\140\7\3\1\0\1\3\1\0\1\3\2\0\17\3"+
    "\10\0\2\3\3\0\11\3\1\0\4\3\1\141\5\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\12\3"+
    "\1\141\4\3\10\0\2\3\3\0\11\3\1\0\12\3"+
    "\1\0\5\3\1\142\1\3\1\0\1\3\1\0\1\3"+
    "\2\0\17\3\10\0\2\3\3\0\2\3\1\143\1\3"+
    "\1\144\1\3\1\52\2\3\1\0\2\3\1\145\7\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\1\3"+
    "\1\143\1\3\1\144\1\3\1\52\11\3\10\0\2\3"+
    "\3\0\3\3\1\146\5\3\1\0\1\3\1\147\10\3"+
    "\1\0\2\3\1\150\4\3\1\0\1\3\1\0\1\3"+
    "\2\0\2\3\1\146\12\3\1\150\1\3\10\0\2\3"+
    "\3\0\11\3\1\0\2\3\1\151\5\3\1\152\1\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\14\3"+
    "\1\152\2\3\10\0\2\3\3\0\5\3\1\153\3\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\4\3\1\153\12\3\10\0\2\3\3\0\2\3"+
    "\1\154\6\3\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\1\3\1\154\15\3\10\0\2\3"+
    "\3\0\11\3\1\0\12\3\1\0\3\3\1\155\3\3"+
    "\1\0\1\3\1\0\1\3\2\0\17\3\10\0\2\3"+
    "\3\0\2\3\1\156\6\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\1\3\1\156\15\3"+
    "\10\0\2\3\3\0\1\3\1\157\7\3\1\0\12\3"+
    "\1\0\1\160\6\3\1\0\1\3\1\0\1\3\2\0"+
    "\1\157\16\3\10\0\2\3\3\0\2\3\1\161\6\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\1\3\1\161\15\3\10\0\2\3\3\0\11\3"+
    "\1\0\2\3\1\162\7\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\17\3\10\0\2\3\3\0\5\3"+
    "\1\163\3\3\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\4\3\1\163\12\3\10\0\2\3"+
    "\3\0\4\3\1\164\4\3\1\0\6\3\1\165\3\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\3\3"+
    "\1\164\13\3\10\0\2\3\3\0\11\3\1\0\3\3"+
    "\1\166\6\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\11\3\1\166\5\3\10\0\2\3\3\0\10\3"+
    "\1\167\1\0\1\170\7\3\1\171\1\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\7\3\1\167\1\170"+
    "\3\3\1\171\2\3\10\0\2\3\3\0\6\3\1\172"+
    "\2\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\5\3\1\172\11\3\10\0\2\3\3\0"+
    "\10\3\1\173\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\7\3\1\173\7\3\10\0\2\3"+
    "\3\0\6\3\1\174\2\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\5\3\1\174\11\3"+
    "\10\0\2\3\3\0\11\3\1\0\3\3\1\175\6\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\11\3"+
    "\1\175\5\3\10\0\2\3\3\0\7\3\1\176\1\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\6\3\1\176\10\3\10\0\2\3\3\0\2\3"+
    "\1\177\3\3\1\200\2\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\1\3\1\177\3\3"+
    "\1\200\11\3\10\0\2\3\3\0\66\201\1\202\2\203"+
    "\1\204\1\205\3\201\2\3\1\206\6\3\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\1\3"+
    "\1\206\15\3\10\0\2\3\27\0\1\207\47\0\1\207"+
    "\3\0\1\116\34\0\1\117\3\0\1\116\26\0\1\117"+
    "\3\0\66\121\1\210\2\123\1\124\4\121\67\125\2\0"+
    "\5\125\4\3\1\211\4\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\3\3\1\211\13\3"+
    "\10\0\2\3\3\0\11\3\1\0\1\212\11\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\10\3\1\212"+
    "\6\3\10\0\2\3\3\0\10\3\1\213\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\7\3"+
    "\1\213\7\3\10\0\2\3\3\0\11\3\1\0\12\3"+
    "\1\0\4\3\1\214\2\3\1\0\1\3\1\0\1\3"+
    "\2\0\16\3\1\214\10\0\2\3\3\0\11\3\1\0"+
    "\4\3\1\215\5\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\12\3\1\215\4\3\10\0\2\3\3\0"+
    "\11\3\1\0\10\3\1\216\1\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\14\3\1\216\2\3\10\0"+
    "\2\3\3\0\10\3\1\217\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\7\3\1\217\7\3"+
    "\10\0\2\3\3\0\11\3\1\0\1\212\7\3\1\216"+
    "\1\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\10\3\1\212\3\3\1\216\2\3\10\0\2\3\3\0"+
    "\11\3\1\0\10\3\1\220\1\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\14\3\1\220\2\3\10\0"+
    "\2\3\3\0\4\3\1\221\4\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\3\3\1\221"+
    "\13\3\10\0\2\3\12\0\1\222\40\0\1\222\25\0"+
    "\4\3\1\223\4\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\3\3\1\223\13\3\10\0"+
    "\2\3\3\0\10\3\1\224\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\7\3\1\224\7\3"+
    "\10\0\2\3\3\0\11\3\1\0\1\225\11\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\10\3\1\225"+
    "\6\3\10\0\2\3\3\0\11\3\1\0\4\3\1\226"+
    "\5\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\12\3\1\226\4\3\10\0\2\3\3\0\11\3\1\0"+
    "\1\227\11\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\10\3\1\227\6\3\10\0\2\3\3\0\3\3"+
    "\1\230\5\3\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\2\3\1\230\14\3\10\0\2\3"+
    "\3\0\11\3\1\0\2\3\1\231\7\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\17\3\10\0\2\3"+
    "\3\0\4\3\1\232\4\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\3\3\1\232\13\3"+
    "\10\0\2\3\3\0\5\3\1\233\3\3\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\4\3"+
    "\1\233\12\3\10\0\2\3\3\0\11\3\1\0\2\3"+
    "\1\234\7\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\17\3\10\0\2\3\3\0\4\3\1\60\4\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\3\3\1\60\13\3\10\0\2\3\3\0\11\3"+
    "\1\0\7\3\1\235\2\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\17\3\10\0\2\3\3\0\11\3"+
    "\1\0\12\3\1\0\1\3\1\236\5\3\1\0\1\3"+
    "\1\0\1\3\2\0\17\3\10\0\2\3\3\0\11\3"+
    "\1\0\3\3\1\237\6\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\11\3\1\237\5\3\10\0\2\3"+
    "\3\0\11\3\1\0\10\3\1\61\1\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\14\3\1\61\2\3"+
    "\10\0\2\3\3\0\11\3\1\0\3\3\1\240\6\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\11\3"+
    "\1\240\5\3\10\0\2\3\3\0\11\3\1\0\1\3"+
    "\1\241\10\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\17\3\10\0\2\3\3\0\10\3\1\242\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\7\3\1\242\7\3\10\0\2\3\3\0\4\3\1\243"+
    "\4\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\3\3\1\243\13\3\10\0\2\3\3\0"+
    "\7\3\1\244\1\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\6\3\1\244\10\3\10\0"+
    "\2\3\3\0\11\3\1\0\5\3\1\245\4\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\13\3\1\245"+
    "\3\3\10\0\2\3\3\0\11\3\1\0\1\246\11\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\10\3"+
    "\1\246\6\3\10\0\2\3\3\0\11\3\1\0\1\247"+
    "\11\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\10\3\1\247\6\3\10\0\2\3\3\0\2\3\1\250"+
    "\6\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\1\3\1\250\15\3\10\0\2\3\3\0"+
    "\10\3\1\251\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\7\3\1\251\7\3\10\0\2\3"+
    "\3\0\10\3\1\157\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\7\3\1\157\7\3\10\0"+
    "\2\3\3\0\11\3\1\0\1\252\11\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\10\3\1\252\6\3"+
    "\10\0\2\3\3\0\5\3\1\253\3\3\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\4\3"+
    "\1\253\12\3\10\0\2\3\3\0\10\3\1\254\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\7\3\1\254\7\3\10\0\2\3\3\0\2\3\1\255"+
    "\6\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\1\3\1\255\15\3\10\0\2\3\3\0"+
    "\3\3\1\256\5\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\2\3\1\256\14\3\10\0"+
    "\2\3\3\0\11\3\1\0\12\3\1\0\3\3\1\257"+
    "\3\3\1\0\1\3\1\0\1\3\2\0\17\3\10\0"+
    "\2\3\3\0\66\201\1\202\2\203\1\204\1\260\3\201"+
    "\66\261\1\202\2\0\1\261\1\0\3\261\66\201\1\262"+
    "\2\203\1\204\1\260\3\201\66\260\1\263\2\203\1\264"+
    "\1\205\3\260\5\3\1\61\3\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\4\3\1\61"+
    "\12\3\10\0\2\3\42\0\1\265\32\0\1\265\3\0"+
    "\5\3\1\266\3\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\4\3\1\266\12\3\10\0"+
    "\2\3\3\0\2\3\1\267\6\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\1\3\1\267"+
    "\15\3\10\0\2\3\3\0\4\3\1\206\4\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\3\3\1\206\13\3\10\0\2\3\3\0\2\3\1\11"+
    "\6\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\1\3\1\11\15\3\10\0\2\3\3\0"+
    "\11\3\1\0\3\3\1\252\6\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\11\3\1\252\5\3\10\0"+
    "\2\3\3\0\11\3\1\0\2\3\1\270\7\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\17\3\10\0"+
    "\2\3\3\0\11\3\1\0\10\3\1\157\1\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\14\3\1\157"+
    "\2\3\10\0\2\3\3\0\11\3\1\0\6\3\1\61"+
    "\3\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\17\3\10\0\2\3\3\0\7\3\1\271\1\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\6\3\1\271\10\3\10\0\2\3\11\0\1\272\40\0"+
    "\1\272\26\0\11\3\1\0\7\3\1\206\2\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\17\3\10\0"+
    "\2\3\3\0\11\3\1\0\6\3\1\273\3\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\17\3\10\0"+
    "\2\3\3\0\4\3\1\274\4\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\3\3\1\274"+
    "\13\3\10\0\2\3\3\0\11\3\1\0\12\3\1\0"+
    "\1\3\1\275\5\3\1\0\1\3\1\0\1\3\2\0"+
    "\17\3\10\0\2\3\3\0\10\3\1\276\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\7\3"+
    "\1\276\7\3\10\0\2\3\3\0\2\3\1\277\6\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\1\3\1\277\15\3\10\0\2\3\3\0\10\3"+
    "\1\300\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\7\3\1\300\7\3\10\0\2\3\3\0"+
    "\11\3\1\0\4\3\1\301\5\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\12\3\1\301\4\3\10\0"+
    "\2\3\3\0\11\3\1\0\12\3\1\0\1\302\6\3"+
    "\1\0\1\3\1\0\1\3\2\0\17\3\10\0\2\3"+
    "\3\0\2\3\1\303\6\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\1\3\1\303\15\3"+
    "\10\0\2\3\3\0\10\3\1\304\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\7\3\1\304"+
    "\7\3\10\0\2\3\3\0\2\3\1\305\6\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\1\3\1\305\15\3\10\0\2\3\3\0\11\3\1\0"+
    "\1\306\11\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\10\3\1\306\6\3\10\0\2\3\3\0\4\3"+
    "\1\307\4\3\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\3\3\1\307\13\3\10\0\2\3"+
    "\3\0\11\3\1\0\2\3\1\310\7\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\17\3\10\0\2\3"+
    "\3\0\5\3\1\311\3\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\4\3\1\311\12\3"+
    "\10\0\2\3\3\0\11\3\1\0\11\3\1\312\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\17\3\10\0"+
    "\2\3\3\0\2\3\1\313\6\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\1\3\1\313"+
    "\15\3\10\0\2\3\3\0\2\3\1\252\1\3\1\314"+
    "\4\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\1\3\1\252\1\3\1\314\13\3\10\0"+
    "\2\3\3\0\4\3\1\315\4\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\3\3\1\315"+
    "\13\3\10\0\2\3\3\0\10\3\1\316\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\7\3"+
    "\1\316\7\3\10\0\2\3\3\0\1\3\1\317\7\3"+
    "\1\0\12\3\1\0\1\320\6\3\1\0\1\3\1\0"+
    "\1\3\2\0\1\317\16\3\10\0\2\3\3\0\5\3"+
    "\1\321\3\3\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\4\3\1\321\12\3\10\0\2\3"+
    "\3\0\11\3\1\0\4\3\1\61\5\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\12\3\1\61\4\3"+
    "\10\0\2\3\3\0\1\3\1\322\7\3\1\0\4\3"+
    "\1\323\5\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\1\322\11\3\1\323\4\3\10\0\2\3\3\0"+
    "\11\3\1\0\10\3\1\324\1\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\14\3\1\324\2\3\10\0"+
    "\2\3\3\0\11\3\1\0\3\3\1\325\6\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\11\3\1\325"+
    "\5\3\10\0\2\3\3\0\2\3\1\326\6\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\1\3\1\326\15\3\10\0\2\3\3\0\11\3\1\0"+
    "\10\3\1\327\1\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\14\3\1\327\2\3\10\0\2\3\3\0"+
    "\66\260\1\0\2\203\1\264\73\260\2\203\1\264\4\260"+
    "\2\3\1\61\6\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\1\3\1\61\15\3\10\0"+
    "\2\3\3\0\10\3\1\330\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\7\3\1\330\7\3"+
    "\10\0\2\3\3\0\1\3\1\245\7\3\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\1\245"+
    "\16\3\10\0\2\3\3\0\4\3\1\331\4\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\3\3\1\331\13\3\10\0\2\3\21\0\1\332\35\0"+
    "\1\332\21\0\11\3\1\0\4\3\1\333\5\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\12\3\1\333"+
    "\4\3\10\0\2\3\3\0\11\3\1\0\11\3\1\334"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\17\3"+
    "\10\0\2\3\3\0\11\3\1\0\2\3\1\335\7\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\17\3"+
    "\10\0\2\3\3\0\11\3\1\0\3\3\1\336\6\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\11\3"+
    "\1\336\5\3\10\0\2\3\3\0\11\3\1\0\12\3"+
    "\1\0\1\60\6\3\1\0\1\3\1\0\1\3\2\0"+
    "\17\3\10\0\2\3\3\0\11\3\1\0\10\3\1\337"+
    "\1\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\14\3\1\337\2\3\10\0\2\3\3\0\11\3\1\0"+
    "\3\3\1\340\6\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\11\3\1\340\5\3\10\0\2\3\3\0"+
    "\11\3\1\0\3\3\1\341\6\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\11\3\1\341\5\3\10\0"+
    "\2\3\3\0\5\3\1\215\3\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\4\3\1\215"+
    "\12\3\10\0\2\3\3\0\11\3\1\0\3\3\1\342"+
    "\6\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\11\3\1\342\5\3\10\0\2\3\3\0\11\3\1\0"+
    "\12\3\1\0\1\215\6\3\1\0\1\3\1\0\1\3"+
    "\2\0\17\3\10\0\2\3\3\0\4\3\1\343\4\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\3\3\1\343\13\3\10\0\2\3\3\0\6\3"+
    "\1\206\2\3\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\5\3\1\206\11\3\10\0\2\3"+
    "\3\0\4\3\1\344\4\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\3\3\1\344\13\3"+
    "\10\0\2\3\3\0\11\3\1\0\3\3\1\345\6\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\11\3"+
    "\1\345\5\3\10\0\2\3\3\0\2\3\1\346\6\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\1\3\1\346\15\3\10\0\2\3\3\0\1\3"+
    "\1\347\7\3\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\1\347\16\3\10\0\2\3\3\0"+
    "\5\3\1\350\3\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\4\3\1\350\12\3\10\0"+
    "\2\3\3\0\11\3\1\0\5\3\1\252\4\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\13\3\1\252"+
    "\3\3\10\0\2\3\3\0\7\3\1\351\1\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\6\3\1\351\10\3\10\0\2\3\3\0\4\3\1\352"+
    "\4\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\3\3\1\352\13\3\10\0\2\3\3\0"+
    "\6\3\1\353\2\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\5\3\1\353\11\3\10\0"+
    "\2\3\3\0\11\3\1\0\12\3\1\354\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\17\3\10\0\2\3\3\0"+
    "\4\3\1\355\4\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\3\3\1\355\13\3\10\0"+
    "\2\3\3\0\11\3\1\0\3\3\1\356\6\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\11\3\1\356"+
    "\5\3\10\0\2\3\3\0\11\3\1\0\12\3\1\357"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\17\3\10\0"+
    "\2\3\3\0\4\3\1\360\4\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\3\3\1\360"+
    "\13\3\10\0\2\3\3\0\11\3\1\0\1\361\11\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\10\3"+
    "\1\361\6\3\10\0\2\3\3\0\2\3\1\362\6\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\1\3\1\362\15\3\10\0\2\3\3\0\11\3"+
    "\1\0\4\3\1\266\5\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\12\3\1\266\4\3\10\0\2\3"+
    "\3\0\11\3\1\0\12\3\1\0\6\3\1\266\1\0"+
    "\1\3\1\0\1\3\2\0\17\3\10\0\2\3\20\0"+
    "\1\363\35\0\1\363\22\0\11\3\1\0\12\3\1\364"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\17\3\10\0"+
    "\2\3\3\0\2\3\1\365\6\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\1\3\1\365"+
    "\15\3\10\0\2\3\3\0\5\3\1\366\3\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\4\3\1\366\12\3\10\0\2\3\3\0\4\3\1\367"+
    "\4\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\3\3\1\367\13\3\10\0\2\3\3\0"+
    "\4\3\1\370\4\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\3\3\1\370\13\3\10\0"+
    "\2\3\3\0\2\3\1\371\6\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\1\3\1\371"+
    "\15\3\10\0\2\3\3\0\4\3\1\372\4\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\3\3\1\372\13\3\10\0\2\3\3\0\4\3\1\373"+
    "\4\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\3\3\1\373\13\3\10\0\2\3\3\0"+
    "\11\3\1\0\12\3\1\0\1\61\6\3\1\0\1\3"+
    "\1\0\1\3\2\0\17\3\10\0\2\3\3\0\11\3"+
    "\1\0\1\374\11\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\10\3\1\374\6\3\10\0\2\3\3\0"+
    "\4\3\1\375\4\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\3\3\1\375\13\3\10\0"+
    "\2\3\3\0\11\3\1\0\1\376\11\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\10\3\1\376\6\3"+
    "\10\0\2\3\3\0\11\3\1\0\12\3\1\377\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\17\3\10\0\2\3"+
    "\3\0\11\3\1\0\7\3\1\61\2\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\17\3\10\0\2\3"+
    "\3\0\2\3\1\u0100\6\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\1\3\1\u0100\15\3"+
    "\10\0\2\3\3\0\11\3\1\0\12\3\1\0\1\u0101"+
    "\6\3\1\0\1\3\1\0\1\3\2\0\17\3\10\0"+
    "\2\3\3\0\5\3\1\u0102\3\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\4\3\1\u0102"+
    "\12\3\10\0\2\3\12\0\1\u0103\40\0\1\u0103\25\0"+
    "\11\3\1\0\3\3\1\u0104\6\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\11\3\1\u0104\5\3\10\0"+
    "\2\3\3\0\10\3\1\303\1\0\1\u0105\11\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\7\3\1\303"+
    "\1\u0105\6\3\10\0\2\3\20\0\1\u0106\35\0\1\u0106"+
    "\22\0\7\3\1\u0107\1\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\6\3\1\u0107\10\3"+
    "\10\0\2\3\3\0\2\3\1\u0108\6\3\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\1\3"+
    "\1\u0108\15\3\10\0\2\3\3\0\7\3\1\61\1\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\6\3\1\61\10\3\10\0\2\3\27\0\1\u0109"+
    "\103\0\1\u010a\43\0\1\3\1\u010b\7\3\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\1\u010b"+
    "\16\3\10\0\2\3\3\0\11\3\1\0\12\3\1\0"+
    "\1\304\6\3\1\0\1\3\1\0\1\3\2\0\17\3"+
    "\10\0\2\3\3\0\6\3\1\206\2\3\1\0\11\3"+
    "\1\u010c\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\5\3\1\206\11\3\10\0\2\3\3\0\11\3\1\0"+
    "\3\3\1\220\6\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\11\3\1\220\5\3\10\0\2\3\3\0"+
    "\5\3\1\u010d\3\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\4\3\1\u010d\12\3\10\0"+
    "\2\3\3\0\6\3\1\u010e\2\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\5\3\1\u010e"+
    "\11\3\10\0\2\3\3\0\11\3\1\0\11\3\1\u010f"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\17\3"+
    "\10\0\2\3\3\0\2\3\1\u0110\6\3\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\1\3"+
    "\1\u0110\15\3\10\0\2\3\3\0\3\3\1\u0111\5\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\2\3\1\u0111\14\3\10\0\2\3\3\0\11\3"+
    "\1\0\4\3\1\u0112\5\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\12\3\1\u0112\4\3\10\0\2\3"+
    "\7\0\1\u0113\40\0\1\u0113\30\0\11\3\1\0\3\3"+
    "\1\u0114\6\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\11\3\1\u0114\5\3\10\0\2\3\3\0\10\3"+
    "\1\u0115\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\7\3\1\u0115\7\3\10\0\2\3\3\0"+
    "\1\3\1\u0116\7\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\1\u0116\16\3\10\0\2\3"+
    "\5\0\1\u0117\40\0\1\u0117\32\0\4\3\1\u0118\4\3"+
    "\1\0\12\3\1\0\7\3\1\0\1\3\1\0\1\3"+
    "\2\0\3\3\1\u0118\13\3\10\0\2\3\3\0\10\3"+
    "\1\u0119\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\7\3\1\u0119\7\3\10\0\2\3\7\0"+
    "\1\u011a\40\0\1\u011a\30\0\2\3\1\u011b\6\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\1\3\1\u011b\15\3\10\0\2\3\3\0\5\3\1\u011c"+
    "\3\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\4\3\1\u011c\12\3\10\0\2\3\11\0"+
    "\1\u011d\40\0\1\u011d\32\0\1\u011e\40\0\1\u011e\30\0"+
    "\11\3\1\0\12\3\1\u011f\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\17\3\10\0\2\3\3\0\2\3\1\u0120"+
    "\6\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\1\3\1\u0120\15\3\10\0\2\3\3\0"+
    "\11\3\1\0\3\3\1\u0121\6\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\11\3\1\u0121\5\3\10\0"+
    "\2\3\3\0\5\3\1\252\3\3\1\0\12\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\4\3\1\252"+
    "\12\3\10\0\2\3\3\0\2\3\1\u0122\6\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\1\3\1\u0122\15\3\10\0\2\3\3\0\7\3\1\234"+
    "\1\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\6\3\1\234\10\3\10\0\2\3\3\0"+
    "\4\3\1\u0123\4\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\3\3\1\u0123\13\3\10\0"+
    "\2\3\3\0\10\3\1\u0124\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\7\3\1\u0124\7\3"+
    "\10\0\2\3\10\0\1\u0125\40\0\1\u0125\27\0\2\3"+
    "\1\173\6\3\1\0\12\3\1\0\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\1\3\1\173\15\3\10\0\2\3"+
    "\3\0\11\3\1\0\3\3\1\u0126\6\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\11\3\1\u0126\5\3"+
    "\10\0\2\3\3\0\4\3\1\160\4\3\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\3\3"+
    "\1\160\13\3\10\0\2\3\20\0\1\u0127\35\0\1\u0127"+
    "\22\0\6\3\1\u0128\2\3\1\0\12\3\1\0\7\3"+
    "\1\0\1\3\1\0\1\3\2\0\5\3\1\u0128\11\3"+
    "\10\0\2\3\3\0\4\3\1\303\4\3\1\0\12\3"+
    "\1\0\7\3\1\0\1\3\1\0\1\3\2\0\3\3"+
    "\1\303\13\3\10\0\2\3\12\0\1\u0129\40\0\1\u0129"+
    "\25\0\11\3\1\0\12\3\1\u012a\7\3\1\0\1\3"+
    "\1\0\1\3\2\0\17\3\10\0\2\3\3\0\11\3"+
    "\1\0\12\3\1\0\1\266\6\3\1\0\1\3\1\0"+
    "\1\3\2\0\17\3\10\0\2\3\10\0\1\u012b\40\0"+
    "\1\u012b\44\0\1\u012c\35\0\1\u012c\41\0\1\u012d\35\0"+
    "\1\u012d\20\0\11\3\1\0\12\3\1\u012e\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\17\3\10\0\2\3\3\0"+
    "\4\3\1\u0112\4\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\3\3\1\u0112\13\3\10\0"+
    "\2\3\3\0\11\3\1\0\12\3\1\u012f\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\17\3\10\0\2\3\3\0"+
    "\2\3\1\u0130\6\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\1\3\1\u0130\15\3\10\0"+
    "\2\3\3\0\11\3\1\0\10\3\1\u0122\1\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\14\3\1\u0122"+
    "\2\3\10\0\2\3\7\0\1\u0131\40\0\1\u0131\30\0"+
    "\2\3\1\252\6\3\1\0\12\3\1\0\7\3\1\0"+
    "\1\3\1\0\1\3\2\0\1\3\1\252\15\3\10\0"+
    "\2\3\15\0\1\u0132\37\0\1\u0132\23\0\5\3\1\u0133"+
    "\3\3\1\0\12\3\1\0\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\4\3\1\u0133\12\3\10\0\2\3\5\0"+
    "\1\u0134\40\0\1\u0134\42\0\1\u0135\17\0\1\u0136\20\0"+
    "\1\u0135\51\0\1\u0129\101\0\1\u0137\26\0\1\u0137\27\0"+
    "\1\u0138\37\0\1\u0138\33\0\1\u0139\40\0\1\u0139\43\0"+
    "\1\u013a\35\0\1\u013a\20\0\1\3\1\u0122\7\3\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\1\u0122\16\3\10\0\2\3\20\0\1\u013b\35\0\1\u013b"+
    "\26\0\1\u013c\40\0\1\u013c\30\0\10\3\1\u013d\1\0"+
    "\12\3\1\0\7\3\1\0\1\3\1\0\1\3\2\0"+
    "\7\3\1\u013d\7\3\10\0\2\3\6\0\1\u013e\40\0"+
    "\1\u013e\33\0\1\u013f\40\0\1\u013f\36\0\1\u0140\40\0"+
    "\1\u0140\32\0\1\u0141\40\0\1\u0141\57\0\1\u0142\62\0"+
    "\1\u0143\37\0\1\u0143\27\0\1\u0144\40\0\1\u0144\55\0"+
    "\1\u0134\50\0\11\3\1\0\10\3\1\u0145\1\3\1\0"+
    "\7\3\1\0\1\3\1\0\1\3\2\0\14\3\1\u0145"+
    "\2\3\10\0\2\3\20\0\1\u0146\35\0\1\u0146\25\0"+
    "\1\u0147\40\0\1\u0147\36\0\1\u0134\40\0\1\u0134\30\0"+
    "\1\u0148\40\0\1\u0148\50\0\1\u0149\35\0\1\u0149\24\0"+
    "\1\u014a\40\0\1\u014a\42\0\1\u014b\40\0\1\u014b\24\0"+
    "\11\3\1\0\12\3\1\u014c\7\3\1\0\1\3\1\0"+
    "\1\3\2\0\17\3\10\0\2\3\5\0\1\u014d\40\0"+
    "\1\u014d\40\0\1\u014e\40\0\1\u014e\32\0\1\u014f\40\0"+
    "\1\u014f\34\0\1\u0150\40\0\1\u0150\55\0\1\u0151\72\0"+
    "\1\u0152\33\0\1\u0152\21\0\1\u0153\40\0\1\u0153\44\0"+
    "\1\u0134\37\0\1\u0134\35\0\1\u0129\37\0\1\u0129\50\0"+
    "\1\u0154\56\0\1\u0155\40\0\1\u0155\34\0\1\u0156\40\0"+
    "\1\u0156\52\0\1\u0157\54\0\1\u0158\40\0\1\u0158\41\0"+
    "\1\u0159\40\0\1\u0159\31\0\1\u015a\40\0\1\u015a\34\0"+
    "\1\u015b\40\0\1\u015b\51\0\1\u015c\33\0\1\u015c\22\0"+
    "\1\u015d\40\0\1\u015d\46\0\1\u015e\35\0\1\u015e\40\0"+
    "\1\u0134\35\0\1\u0134\22\0\1\u015f\40\0\1\u015f\37\0"+
    "\1\u0160\40\0\1\u0160\32\0\1\u0161\40\0\1\u0161\34\0"+
    "\1\u0162\40\0\1\u0162\36\0\1\u0163\40\0\1\u0163\45\0"+
    "\1\u0164\35\0\1\u0164\47\0\1\u0165\65\0\1\u0166\35\0"+
    "\1\u0166\24\0\1\u0167\40\0\1\u0167\47\0\1\u0162\35\0"+
    "\1\u0162\26\0\1\u0168\40\0\1\u0168\42\0\1\u0169\37\0"+
    "\1\u0169\31\0\1\u016a\40\0\1\u016a\36\0\1\u016b\40\0"+
    "\1\u016b\31\0\1\u0162\40\0\1\u0162\51\0\1\u0162\33\0"+
    "\1\u0162\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20770];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\15\1\1\11\3\1\1\11\2\1\1\11"+
    "\64\1\1\0\1\1\1\0\2\1\1\0\2\11\1\0"+
    "\13\1\1\0\40\1\1\0\1\1\1\11\2\0\1\1"+
    "\1\0\12\1\1\0\35\1\2\0\1\1\1\11\1\0"+
    "\5\1\1\0\37\1\1\0\21\1\1\0\2\1\1\0"+
    "\3\1\2\0\12\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\2\0\10\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\3\0\5\1\1\0\1\1\1\0\1\1\7\0"+
    "\1\1\2\0\1\1\1\11\10\0\1\1\7\0\1\1"+
    "\24\0\1\1\21\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
	private StringBuffer commentBuffer = new StringBuffer();
	private int commentNestCount = 0;
	private int commentStartLine = 0;
	private int commentStartChar = 0;
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }

    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }                   
            } else {
                in = System.in;
            }       
            PDDLLexer shredder = new PDDLLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != OCLToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    } 

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PDDLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PDDLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.LITERAL_FLOAT;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 16: break;
        case 13: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.ERROR_UNCLOSED_BIT_STRING;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 17: break;
        case 15: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.LITERAL_BIT_STRING;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 18: break;
        case 6: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.SEPARATOR;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 19: break;
        case 3: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.OPERATOR;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 20: break;
        case 8: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.RESERVED_WORD;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 21: break;
        case 1: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.WHITE_SPACE;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 22: break;
        case 7: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.VARIABLE;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 23: break;
        case 4: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.ERROR;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 24: break;
        case 14: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.ERROR_BAD_BIT_STRING;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 25: break;
        case 12: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.COMMENT_END_OF_LINE;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 26: break;
        case 2: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.IDENTIFIER;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 27: break;
        case 10: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.LITERAL_STRING;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 28: break;
        case 11: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.ERROR_UNCLOSED_STRING;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 29: break;
        case 5: 
          { nextState = YYINITIAL;
	lastToken = PDDLToken.LITERAL_INTEGER;
    String text = yytext();
	PDDLToken t = (new PDDLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
